<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration & Login Form</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Montserrat:wght@400;600&display=swap">
    <style>
                body {
            background: linear-gradient(to right, #e0f2f1, #ffffff); /* Light green to white gradient */
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .container {
            max-width: 500px; 
            width: 100%;
            background: #ffffff; /* White background for container */
            padding: 30px; 
            border-radius: 12px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1); /* Deeper shadow */
            border: 2px solid #004d40; /* Green border */
            overflow: hidden; /* Ensure rounded corners work on all elements */
        }
        .header {
            text-align: center;
            margin-bottom: 20px; 
        }
        .header img {
            width: 180px; 
            height: auto;
        }
        h1 {
            color: #004d40;  /* Dark green text */
            font-size: 24px; 
            margin: 10px 0;
            font-weight: 700;
            font-family: 'Montserrat', sans-serif;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #004d40; /* Dark green text */
            font-family: 'Roboto', sans-serif;
        }
        input[type="text"], input[type="email"], input[type="password"] {
            width: 100%;
            padding: 12px; 
            margin-bottom: 16px; 
            border: 1px solid #004d40; /* Green border */
            border-radius: 8px; 
            font-size: 16px; 
            box-sizing: border-box;
            background-color: #ffffff; /* White background for inputs */
            color: #000000; /* Black text */
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        input[type="text"]:focus, input[type="email"]:focus, input[type="password"]:focus {
            border-color: #388e3c; /* Dark green border on focus */
            outline: none;
            box-shadow: 0 0 0 3px rgba(56, 142, 60, 0.2); /* Light green shadow */
        }
        input[type="submit"] {
            background-image: linear-gradient(to right, #004d40, #00796b); 
            border: none;
            color: #ffffff; /* White text */
            padding: 12px;
            font-size: 18px; 
            cursor: pointer;
            border-radius: 8px; 
            transition: background-color 0.3s, transform 0.3s;
            width: 100%;
            font-family: 'Montserrat', sans-serif;
        }
        input[type="submit"]:hover {
            border: #004d40 5px;
            background:linear-gradient(to right, #e0f2f1,  #e0f2f2);
            color: green; /* Darker green gradient on hover */
            transform: scale(1.05);
        }
        .error {
            color: #d32f2f; /* Red error messages */
            font-size: 14px; 
            margin-top: -6px;
            margin-bottom: 14px;
            font-family: 'Roboto', sans-serif;
        }
        .tabs {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }
        .tabs button {
            background: #004d40;
            color: white;
            border: none;
            border-radius: 8px 8px 0 0;
            padding: 12px 20px;
            font-size: 18px;
            cursor: pointer;
            transition: background 0.3s;
            width: 50%;
        }
        .tabs button.active {
            background: #ffffff;
            color:  #004d40;
        }
        
        .form-container {
            display: none;
        }
        .form-container.active {
            display: block;
        }
        @media (max-width: 768px) {
            .container {
                padding: 20px; 
            }
            h1 {
                font-size: 22px; 
            }
            input[type="submit"] {
                font-size: 16px; 
            }
            .tabs button {
                font-size: 16px;
                padding: 10px;
            }
        }/* Your existing CSS here */
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
<?php
// Database configuration
$servername = "localhost"; // Your database server (usually localhost)
$username = "yaseen";     // Your database username
$password = "Yaseen@123";            // Your database password
$dbname = "own_cart";      // Your database name

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// Sanitize user input
function sanitizeInput($data) {
    return htmlspecialchars(trim($data));
}

$fullName = $email = $password = $confirmPassword = "";
$errors = [];

// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST["register"])) {
        $fullName = sanitizeInput($_POST["fullName"]);
        $email = sanitizeInput($_POST["email"]);
        $password = sanitizeInput($_POST["password"]);
        $confirmPassword = sanitizeInput($_POST["confirmPassword"]);

        // Validate Full Name
        if (empty($fullName) || !preg_match("/^[a-zA-Z\s]+$/", $fullName)) {
            $errors['fullName'] = "Full Name is required and must contain only letters and spaces.";
        }

        // Validate Email
        if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $errors['email'] = "A valid Email Address is required.";
        } else {
            // Check if email is already registered
            $stmt = $conn->prepare("SELECT id FROM users WHERE email=?");
            $stmt->bind_param("s", $email);
            $stmt->execute();
            $stmt->store_result();
            if ($stmt->num_rows > 0) {
                $errors['email'] = "This email is already registered.";
            }
            $stmt->close();
        }

        // Validate Password
        if (strlen($password) < 8) {
            $errors['password'] = "Password is required and must be at least 8 characters long.";
        }

        // Validate Confirm Password
        if ($password !== $confirmPassword) {
            $errors['confirmPassword'] = "Passwords do not match.";
        }

        // If no errors, process the registration
        if (empty($errors)) {
            $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
            
            $stmt = $conn->prepare("INSERT INTO users (full_name, email, password) VALUES (?, ?, ?)");
            $stmt->bind_param("sss", $fullName, $email, $hashedPassword);

            if ($stmt->execute()) {
                echo "<script>
                    $(document).ready(function() {
                        alert('Registration successful! Welcome to Docme Cart, $fullName.');
                        window.location.href = 'task5.php';
                    });
                </script>";
            } else {
                $errors['general'] = "An error occurred while registering. Please try again.";
            }
            $stmt->close();
        }
    } elseif (isset($_POST["login"])) {
        $loginEmail = sanitizeInput($_POST["loginEmail"]);
        $loginPassword = sanitizeInput($_POST["loginPassword"]);

        // Validate Login Email
        if (empty($loginEmail) || !filter_var($loginEmail, FILTER_VALIDATE_EMAIL)) {
            $errors['loginEmail'] = "A valid Email Address is required.";
        } else {
            $stmt = $conn->prepare("SELECT password FROM users WHERE email=?");
            $stmt->bind_param("s", $loginEmail);
            $stmt->execute();
            $stmt->store_result();
            
            if ($stmt->num_rows == 0) {
                $errors['loginEmail'] = "Email not registered.";
            } else {
                $stmt->bind_result($storedPassword);
                $stmt->fetch();

                if (!password_verify($loginPassword, $storedPassword)) {
                    $errors['loginPassword'] = "Incorrect password.";
                }
            }
            $stmt->close();
        }

        // If no errors, process the login
        if (empty($errors)) {
            echo "<script>
                $(document).ready(function() {
                    alert('Login successful! Welcome back to Docme Cart.');
                    window.location.href = 'task5.php';
                });
            </script>";
        }
    }
}
?>

<div class="container">
    <div class="header">
        <img src="docme.png" alt="Logo">
        <h1>Registration & Login</h1>
    </div>
    <div class="tabs">
        <button data-target="#registerForm" class="active">Register</button>
        <button data-target="#loginForm">Login</button>
    </div>

    <!-- Registration Form -->
    <div id="registerForm" class="form-container active">
        <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
            <label for="fullName">Full Name:</label>
            <input type="text" id="fullName" name="fullName" placeholder="Enter your name" value="<?php echo htmlspecialchars($fullName); ?>">
            <div class="error" id="fullNameError"><?php echo isset($errors['fullName']) ? htmlspecialchars($errors['fullName']) : ''; ?></div>

            <label for="email">Email Address:</label>
            <input type="email" id="email" name="email" placeholder="Enter your email address" value="<?php echo htmlspecialchars($email); ?>">
            <div class="error" id="emailError"><?php echo isset($errors['email']) ? htmlspecialchars($errors['email']) : ''; ?></div>

            <label for="password">Password:</label>
            <input type="password" id="password" name="password" placeholder="8 characters required">
            <div class="error" id="passwordError"><?php echo isset($errors['password']) ? htmlspecialchars($errors['password']) : ''; ?></div>

            <label for="confirmPassword">Confirm Password:</label>
            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Enter the password again">
            <div class="error" id="confirmPasswordError"><?php echo isset($errors['confirmPassword']) ? htmlspecialchars($errors['confirmPassword']) : ''; ?></div>

            <input type="submit" name="register" value="Register">
        </form>
    </div>

    <!-- Login Form -->
    <div id="loginForm" class="form-container">
        <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
            <label for="loginEmail">Email Address:</label>
            <input type="email" id="loginEmail" name="loginEmail" placeholder="Enter your email address">
            <div class="error" id="loginEmailError"><?php echo isset($errors['loginEmail']) ? htmlspecialchars($errors['loginEmail']) : ''; ?></div>

            <label for="loginPassword">Password:</label>
            <input type="password" id="loginPassword" name="loginPassword" placeholder="Enter your password">
            <div class="error" id="loginPasswordError"><?php echo isset($errors['loginPassword']) ? htmlspecialchars($errors['loginPassword']) : ''; ?></div>

            <input type="submit" name="login" value="Login">
        </form>
    </div>
</div>

<script>
    $(document).ready(function() {
        // Toggle between Register and Login forms
        $('.tabs button').click(function() {
            let target = $(this).data('target');
            $('.tabs button').removeClass('active');
            $(this).addClass('active');
            $('.form-container').removeClass('active');
            $(target).addClass('active');
        });

        // Real-time validation functions
        function validateFullName() {
            let fullName = $('#fullName').val().trim();
            if (fullName === '' || !/^[a-zA-Z\s]+$/.test(fullName)) {
                $('#fullNameError').text("Full Name is required and must contain only letters and spaces.");
                return false;
            } else {
                $('#fullNameError').text('');
                return true;
            }
        }

        function validateEmail() {
            let email = $('#email').val().trim();
            if (email === '' || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                $('#emailError').text("A valid Email Address is required.");
                return false;
            } else {
                $('#emailError').text('');
                return true;
            }
        }

        function validatePassword() {
            let password = $('#password').val().trim();
            if (password.length < 8) {
                $('#passwordError').text("Password is required and must be at least 8 characters long.");
                return false;
            } else {
                $('#passwordError').text('');
                return true;
            }
        }

        function validateConfirmPassword() {
            let password = $('#password').val().trim();
            let confirmPassword = $('#confirmPassword').val().trim();
            if (password !== confirmPassword) {
                $('#confirmPasswordError').text("Passwords do not match.");
                return false;
            } else {
                $('#confirmPasswordError').text('');
                return true;
            }
        }

        // Event listeners for real-time validation
        $('#fullName').on('input', validateFullName);
        $('#email').on('input', validateEmail);
        $('#password').on('input', validatePassword);
        $('#confirmPassword').on('input', validateConfirmPassword);
    });
</script>
</body>
</html>
